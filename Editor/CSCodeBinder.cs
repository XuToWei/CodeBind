using System;
using System.Collections.Generic;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace CodeBind.Editor
{
    internal sealed class CSCodeBinder : BaseCodeBinder
    {
        private readonly CSCodeBindMono m_CsCodeBindMono;
        
        public CSCodeBinder(MonoScript script, Transform rootTransform, char separatorChar): base(script, rootTransform, separatorChar)
        {
            m_CsCodeBindMono = rootTransform.GetComponent<CSCodeBindMono>();
            if (m_CsCodeBindMono == null)
            {
                throw new Exception($"PureCSCodeBinder init fail! {rootTransform} has no MonoBind!");
            }
        }

        protected override string GetGeneratedCode()
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("// This is automatically generated by CodeBind. Please do not modify it.");
            stringBuilder.AppendLine("");
            string indentation = string.Empty;
            bool needNameSpace = !string.IsNullOrEmpty(m_ScriptNameSpace);
            //命名空间
            if (needNameSpace)
            {
                stringBuilder.AppendLine($"namespace {m_ScriptNameSpace}");
                stringBuilder.AppendLine("{");
                indentation = "\t";
            }
            //类名
            stringBuilder.AppendLine($"{indentation}public partial class {m_ScriptClassName} : CodeBind.ICSCodeBind");
            stringBuilder.AppendLine($"{indentation}{{");
            //组件字段
            stringBuilder.AppendLine($"{indentation}\tpublic CodeBind.CSCodeBindMono Mono {{ get; private set; }}");
            stringBuilder.AppendLine($"{indentation}\tpublic UnityEngine.Transform Transform {{ get; private set; }}");
            stringBuilder.AppendLine("");
            foreach (CodeBindData bindData in m_BindDatas)
            {
                stringBuilder.AppendLine($"{indentation}\tpublic {bindData.BindType.FullName} {bindData.BindName}{bindData.BindPrefix} {{ get; private set; }}");
            }
            stringBuilder.AppendLine("");
            foreach (KeyValuePair<string, List<CodeBindData>> kv in m_BindArrayDataDict)
            {
                stringBuilder.AppendLine($"{indentation}\tpublic {kv.Value[0].BindType.FullName}[] {kv.Key}Array {{ get; private set; }}");
            }
            stringBuilder.AppendLine("");
#if STATE_CONTROLLER_CODE_BIND
            //StateController
            Type stateControllerMonoType = typeof(StateController.StateControllerMono);
            if (CodeBindNameTypeCollection.BindTypeNameDict.TryGetValue(stateControllerMonoType, out string prefix))
            {
                foreach (CodeBindData bindData in m_BindDatas)
                {
                    if (bindData.BindType == stateControllerMonoType)
                    {
                        var controller = bindData.BindTransform.GetComponent<StateController.StateControllerMono>();
                        foreach (var data in controller.EditorControllerDatas)
                        {
                            stringBuilder.AppendLine($"{indentation}\tprivate StateController.StateControllerData m_{bindData.BindName}{data.Name}StateControllerData;");
                            stringBuilder.AppendLine($"{indentation}\tpublic StateController.StateControllerData {bindData.BindName}{data.Name}StateControllerData => m_{bindData.BindName}{data.Name}StateControllerData ??= {bindData.BindName}{bindData.BindPrefix}.GetData(\"{data.Name}\");");
                            stringBuilder.AppendLine($"{indentation}\tpublic static class {bindData.BindName}{data.Name}StateName");
                            stringBuilder.AppendLine($"{indentation}\t{{");
                            foreach (var stateName in data.StateNames)
                            {
                                stringBuilder.AppendLine($"{indentation}\t\tpublic const string {stateName} = \"{stateName}\";");
                            }
                            stringBuilder.AppendLine($"{indentation}\t}}");
                        }
                        stringBuilder.AppendLine("");
                    }
                }
            }
#endif
            //InitBind方法
            stringBuilder.AppendLine($"{indentation}\tpublic void InitBind(CodeBind.CSCodeBindMono mono)");
            stringBuilder.AppendLine($"{indentation}\t{{");
            stringBuilder.AppendLine($"{indentation}\t\tMono = mono;");
            stringBuilder.AppendLine($"{indentation}\t\tTransform = mono.transform;");
            for (int i = 0; i < m_BindDatas.Count; i++)
            {
                CodeBindData bindData = m_BindDatas[i];
                stringBuilder.AppendLine($"{indentation}\t\t{bindData.BindName}{bindData.BindPrefix} = Mono.BindComponents[{i}] as {bindData.BindType.FullName};");
            }
            foreach (KeyValuePair<string, List<CodeBindData>> kv in m_BindArrayDataDict)
            {
                stringBuilder.AppendLine($"{indentation}\t\t{kv.Key}Array = new {kv.Value[0].BindType.FullName}[{kv.Value.Count}]");
                stringBuilder.AppendLine($"{indentation}\t\t{{");
                for (int i = 0; i < kv.Value.Count; i++)
                {
                    CodeBindData bindData = kv.Value[i];
                    stringBuilder.AppendLine($"{indentation}\t\t\tMono.BindComponents[{m_BindArrayDatas.IndexOf(bindData) + m_BindDatas.Count}] as {bindData.BindType.FullName},");
                }
                stringBuilder.AppendLine($"{indentation}\t\t}};");
            }
            stringBuilder.AppendLine($"{indentation}\t}}");
            //Clear方法
            stringBuilder.AppendLine("");
            stringBuilder.AppendLine($"{indentation}\tpublic void ClearBind()");
            stringBuilder.AppendLine($"{indentation}\t{{");
            stringBuilder.AppendLine($"{indentation}\t\tMono = null;");
            stringBuilder.AppendLine($"{indentation}\t\tTransform = null;");
            for (int i = 0; i < m_BindDatas.Count; i++)
            {
                CodeBindData bindData = m_BindDatas[i];
                stringBuilder.AppendLine($"{indentation}\t\t{bindData.BindName}{bindData.BindPrefix} = null;");
            }
            foreach (KeyValuePair<string, List<CodeBindData>> kv in m_BindArrayDataDict)
            {
                stringBuilder.AppendLine($"{indentation}\t\t{kv.Key}Array = null;");
            }
            stringBuilder.AppendLine($"{indentation}\t}}");
            
            stringBuilder.AppendLine($"{indentation}}}");
            if (needNameSpace)
            {
                stringBuilder.AppendLine("}");
            }
            return stringBuilder.ToString();
        }

        protected override void SetSerialization()
        {
            List<string> bindNames = new List<string>();
            List<UnityEngine.Object> bindComponents = new List<UnityEngine.Object>();
            foreach (CodeBindData bindData in m_BindDatas)
            {
                bindNames.Add(bindData.BindName + bindData.BindPrefix);
                if(!TryGetBindTarget(bindData.BindTransform, bindData.BindType, out var target))
                {
                    throw new Exception($"Bind '{bindData.BindTransform} - {bindData.BindType}' fail!");
                }
                bindComponents.Add(target);
            }
            foreach (CodeBindData bindData in m_BindArrayDatas)
            {
                bindNames.Add($"{bindData.BindName}{bindData.BindPrefix}Array");
                if(!TryGetBindTarget(bindData.BindTransform, bindData.BindType, out var target))
                {
                    throw new Exception($"Bind '{bindData.BindTransform} - {bindData.BindType}' fail!");
                }
                bindComponents.Add(target);
            }
            m_CsCodeBindMono.SetBindComponents(bindNames.ToArray(), bindComponents.ToArray());
        }
    }
}
