using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace CodeBind.Editor
{
    internal sealed class MonoCodeBinder : BaseCodeBinder
    {
        private readonly MonoBehaviour m_MonoObj;
        
        public MonoCodeBinder(MonoScript script, Transform rootTransform, char separatorChar): base(script, rootTransform, separatorChar)
        {
            m_MonoObj = rootTransform.GetComponent(script.GetClass()) as MonoBehaviour;
            if (m_MonoObj == null)
            {
                throw new Exception("MonoCodeBinder only can be used of MonoBehaviour!");
            }
        }
        
        protected override string GetGeneratedCode()
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("// This is automatically generated by CodeBind. Please do not modify it.");
            stringBuilder.AppendLine("");
            string indentation = string.Empty;
            bool needNameSpace = !string.IsNullOrEmpty(m_ScriptNameSpace);
            //命名空间
            if (needNameSpace)
            {
                stringBuilder.AppendLine($"namespace {m_ScriptNameSpace}");
                stringBuilder.AppendLine("{");
                indentation = "\t";
            }
            //类名
            stringBuilder.AppendLine($"{indentation}public partial class {m_ScriptClassName}");
            stringBuilder.AppendLine($"{indentation}{{");
            //组件字段
            foreach (CodeBindData bindData in m_BindDatas)
            {
                stringBuilder.AppendLine($"{indentation}\t[UnityEngine.SerializeField, Sirenix.OdinInspector.FoldoutGroup(\"BindData\"), Sirenix.OdinInspector.ReadOnly]");
                stringBuilder.AppendLine($"{indentation}\tprivate {bindData.BindType.FullName} m_{bindData.BindName}{bindData.BindPrefix};");
            }
            stringBuilder.AppendLine("");
            foreach (KeyValuePair<string, List<CodeBindData>> kv in m_BindArrayDataDict)
            {
                stringBuilder.AppendLine($"{indentation}\t[UnityEngine.SerializeField, Sirenix.OdinInspector.FoldoutGroup(\"BindData\"), Sirenix.OdinInspector.ReadOnly]");
                stringBuilder.AppendLine($"{indentation}\tprivate {kv.Value[0].BindType.FullName}[] m_{kv.Key}Array;");
            }
            stringBuilder.AppendLine("");
            foreach (CodeBindData bindData in m_BindDatas)
            {
                stringBuilder.AppendLine($"{indentation}\tpublic {bindData.BindType.FullName} {bindData.BindName}{bindData.BindPrefix} => m_{bindData.BindName}{bindData.BindPrefix};");
            }
            stringBuilder.AppendLine("");
            foreach (KeyValuePair<string, List<CodeBindData>> kv in m_BindArrayDataDict)
            {
                stringBuilder.AppendLine($"{indentation}\tpublic {kv.Value[0].BindType.FullName}[] {kv.Key}Array => m_{kv.Key}Array;");
            }
            stringBuilder.AppendLine("");
#if STATE_CONTROLLER_CODE_BIND
            //StateController
            Type stateControllerMonoType = typeof(StateController.StateControllerMono);
            if (CodeBindNameTypeCollection.BindTypeNameDict.TryGetValue(stateControllerMonoType, out string prefix))
            {
                foreach (CodeBindData bindData in m_BindDatas)
                {
                    if (bindData.BindType == stateControllerMonoType)
                    {
                        var controller = bindData.BindTransform.GetComponent<StateController.StateControllerMono>();
                        foreach (var data in controller.EditorControllerDatas)
                        {
                            stringBuilder.AppendLine($"{indentation}\tprivate StateController.StateControllerData m_{bindData.BindName}{data.Name}StateControllerData;");
                            stringBuilder.AppendLine($"{indentation}\tpublic StateController.StateControllerData {bindData.BindName}{data.Name}StateControllerData => m_{bindData.BindName}{data.Name}StateControllerData ??= {bindData.BindName}{bindData.BindPrefix}.GetData(\"{data.Name}\");");
                            stringBuilder.AppendLine($"{indentation}\tpublic static class {bindData.BindName}{data.Name}StateName");
                            stringBuilder.AppendLine($"{indentation}\t{{");
                            foreach (var stateName in data.StateNames)
                            {
                                stringBuilder.AppendLine($"{indentation}\t\tpublic const string {stateName} = \"{stateName}\";");
                            }
                            stringBuilder.AppendLine($"{indentation}\t}}");
                        }
                        stringBuilder.AppendLine("");
                    }
                }
            }
#endif
            stringBuilder.AppendLine($"{indentation}}}");
            if (needNameSpace)
            {
                stringBuilder.AppendLine("}");
            }
            return stringBuilder.ToString();
        }

        protected override void SetSerialization()
        {
            Type monoType = m_MonoObj.GetType();
            foreach (CodeBindData bindData in m_BindDatas)
            {
                FieldInfo fieldInfo = monoType.GetField($"m_{bindData.BindName}{bindData.BindPrefix}", BindingFlags.NonPublic | BindingFlags.Instance);
                if(!TryGetBindTarget(bindData.BindTransform, bindData.BindType, out var target))
                {
                    throw new Exception($"Bind '{bindData.BindTransform} - {bindData.BindType}' fail!");
                }
                fieldInfo.SetValue(m_MonoObj, target);
            }
            
            foreach (KeyValuePair<string, List<CodeBindData>> kv in m_BindArrayDataDict)
            {
                List<object> components = new List<object>();
                foreach (CodeBindData bindData in kv.Value)
                {
                    if(!TryGetBindTarget(bindData.BindTransform, bindData.BindType, out var target))
                    {
                        throw new Exception($"Bind '{bindData.BindTransform} - {bindData.BindType}' fail!");
                    }
                    components.Add(target);
                }
                FieldInfo fieldInfo = monoType.GetField($"m_{kv.Key}Array", BindingFlags.NonPublic | BindingFlags.Instance);
                Type type = fieldInfo.FieldType.GetElementType();
                Array filledArray = Array.CreateInstance(type, kv.Value.Count);
                Array.Copy(components.ToArray(), filledArray, kv.Value.Count);
                fieldInfo.SetValue(m_MonoObj, filledArray);
            }
        }
    }
}
